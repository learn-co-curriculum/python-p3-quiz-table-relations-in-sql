{
  "quiz": {
    "id": 53499,
    "title": "Table Relations in SQL Quiz",
    "html_url": "https://learning.flatironschool.com/courses/7559/quizzes/53499",
    "mobile_url": "https://learning.flatironschool.com/courses/7559/quizzes/53499?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"python-p3-quiz-table-relations-in-sql\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/python-p3-quiz-table-relations-in-sql/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 7,
    "points_possible": 7.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_53499"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": null,
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/7559/quizzes/53499/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/7559/quizzes/53499/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/7559/quizzes/53499/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/7559/quizzes/53499/submission_versions",
    "assignment_id": 263578,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 25101,
    "show_correct_answers_last_attempt": true,
    "version_number": 3,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "g9b0ede3cac7feacd959fad0b35b3fe86",
    "in_paced_course": false,
    "question_types": [

    ]
  },
  "questions": [
    {
      "id": 366039,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632190,
      "position": null,
      "question_name": "SQL: Foreign Keys",
      "question_type": "multiple_choice_question",
      "question_text": "<p>I want to establish a relationship between a <code>genres</code> table and a <code>books</code> table.\nWhat kind of key would I need to add to the <code>books</code> table to establish this\nrelationship?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Associating Tables with Foreign Keys",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/associating-tables-with-foreign-keys\">Associating Tables with Foreign Keys</a></li></ul><p></p>",
      "answers": [
        {
          "id": 1826,
          "text": "",
          "html": "<p>Foreign Key</p>",
          "comments": "",
          "comments_html": "<p>Exactly! The foreign key refers to the primary key in another table.</p>",
          "weight": 100.0
        },
        {
          "id": 5399,
          "text": "",
          "html": "<p>Primary Key</p>",
          "comments": "",
          "comments_html": "<p>Not quite. The primary key refers to the row in the current table. Which key\nrefers to a different table?</p>",
          "weight": 0.0
        },
        {
          "id": 361,
          "text": "",
          "html": "<p>Integer Key</p>",
          "comments": "",
          "comments_html": "<p>Not quite. It's likely that the key will be an integer, but that's not the\ncorrect name.</p>",
          "weight": 0.0
        },
        {
          "id": 9958,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366040,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632186,
      "position": null,
      "question_name": "Question",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We have two tables: <code>users</code> and <code>posts</code>. A user has many posts, and a post\nbelongs to a user. How should we relate the two tables to one another?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Associating Tables with Foreign Keys",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/associating-tables-with-foreign-keys\">Associating Tables with Foreign Keys</a></li></ul><p></p>",
      "answers": [
        {
          "id": 1082,
          "text": "",
          "html": "<p>Put a <code>user_id</code> foreign key on the <code>posts</code> table pointing to the <code>id</code> primary\nkey in the <code>users</code> table.</p>",
          "comments": "",
          "comments_html": "<p>Yes! We can store which user a post belongs to by having each post point to a\nuser.</p>",
          "weight": 100.0
        },
        {
          "id": 7761,
          "text": "",
          "html": "<p>Put a <code>post_id</code> foreign key on the <code>users</code> table pointing to the <code>id</code> primary\nkey in the <code>posts</code> table.</p>",
          "comments": "",
          "comments_html": "<p>Not quite. This would allow a user to have only one post.</p>",
          "weight": 0.0
        },
        {
          "id": 6172,
          "text": "",
          "html": "<p>Create a join table that points to both <code>users</code> and <code>posts</code></p>",
          "comments": "",
          "comments_html": "<p>We can actually relate the users and posts without a join table. How can we do\nthat?</p>",
          "weight": 0.0
        },
        {
          "id": 4060,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366041,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632192,
      "position": null,
      "question_name": "SQL: Foreign Keys",
      "question_type": "true_false_question",
      "question_text": "<p>We have two tables: <code>users</code> and <code>posts</code>. A user has many posts, and a post\nbelongs to a user. To create this relationship, you would add the foreign key to\nthe <code>users</code> table.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Associating Tables with Foreign Keys",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/associating-tables-with-foreign-keys\">Associating Tables with Foreign Keys</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Remember, in a one-to-many association, the foreign key should be on the table\nof the record that <strong>belongs to</strong> a record in the other table, in this case\nposts.</p>",
          "text": "True",
          "weight": 0,
          "id": 5220
        },
        {
          "comments": "",
          "comments_html": "<p>Correct! In a one-to-many association, the foreign key should be on the table of\nthe record that <strong>belongs to</strong> a record in the other table, in this case posts.</p>",
          "text": "False",
          "weight": 100,
          "id": 3660
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366042,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632188,
      "position": null,
      "question_name": "SQL: Joins",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Which types of joins are supported by SQLite?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:SQL Joins",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/sql-joins\">SQL Joins</a></li></ul><p></p>",
      "answers": [
        {
          "id": 911,
          "text": "",
          "comments": "",
          "comments_html": "<p>Correct! This will return all rows when there's at least one match in both\ntables.</p>",
          "weight": 100.0,
          "html": "<p><code>INNER JOIN</code></p>"
        },
        {
          "id": 8666,
          "text": "",
          "comments": "",
          "comments_html": "<p>Exactly! This returns all rows from the left table and the matching rows from\nthe right table.</p>",
          "weight": 100.0,
          "html": "<p><code>LEFT (OUTER) JOIN</code></p>"
        },
        {
          "id": 5629,
          "text": "",
          "comments": "",
          "comments_html": "<p>This is a valid SQL join type, but it's not supported by SQLite, and it's much\nless common than <code>INNER</code> and <code>LEFT</code> joins.</p>",
          "weight": 0.0,
          "html": "<p><code>RIGHT JOIN</code></p>"
        },
        {
          "id": 8469,
          "text": "",
          "comments": "",
          "comments_html": "<p>This is a valid SQL join type, but it's not supported by SQLite, and it's much\nless common than <code>INNER</code> and <code>LEFT</code> joins.</p>",
          "weight": 0.0,
          "html": "<p><code>FULL JOIN</code></p>"
        },
        {
          "id": 380,
          "text": "",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "html": "<p>I don't know.</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366043,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632183,
      "position": null,
      "question_name": "Question",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Our database has two tables: <code>cocktails</code> and <code>restaurants</code>. The same cocktail\ncan be served by many restaurants, and each restaurant serves many different\ncocktails. How can we relate cocktails to restaurants?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Creating Join Tables",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/creating-join-tables\">Creating Join Tables</a></li></ul><p></p>",
      "answers": [
        {
          "id": 2426,
          "text": "",
          "html": "<p>Create a join table where each row relates a cocktail with a restaurant</p>",
          "comments": "",
          "comments_html": "<p>Perfect! This is a many-to-many relationship, so we need a join table that has\ncocktail_id and restaurant_id columns.</p>",
          "weight": 100.0
        },
        {
          "id": 612,
          "text": "",
          "html": "<p>Add a <code>cocktail_id</code> column (foreign key) to the <code>restaurants</code> table</p>",
          "comments": "",
          "comments_html": "<p>Not quite. This would allow restaurants to serve only a single cocktail. A\nrestaurant would belong to a cocktail.</p>",
          "weight": 0.0
        },
        {
          "id": 4829,
          "text": "",
          "html": "<p>Add a <code>restaurant_id</code> column (foreign key) to the <code>cocktails</code> table</p>",
          "comments": "",
          "comments_html": "<p>Not quite. This would mean each cocktail could be served at only one restaurant.\nA cocktail would belong to a restaurant.</p>",
          "weight": 0.0
        },
        {
          "id": 9837,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366044,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632193,
      "position": null,
      "question_name": "SQL: Joins",
      "question_type": "multiple_choice_question",
      "question_text": "<p>We have two tables: <code>dogs</code> and <code>owners</code>. All of the owners have dogs, but not\nall dogs belong to an owner — some are strays. Which query will return ALL of\nthe dogs and their matching owners?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:SQL Joins",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/sql-joins?module_item_id=ge3bfe09caa6051afc8a3938204a0b1e5\">SQL Joins</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5278,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">dogs</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span> <span class=\"n\">owners</span> <span class=\"k\">ON</span> <span class=\"n\">dogs</span><span class=\"p\">.</span><span class=\"n\">owner_id</span> <span class=\"o\">=</span> <span class=\"n\">owners</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Correct! <code>dogs</code> is the left table, so all of the dogs will be returned, even if\nthey don't have an owner. Matching owners will also be returned.</p>",
          "weight": 100.0
        },
        {
          "id": 2920,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">owners</span>\n<span class=\"k\">LEFT</span> <span class=\"k\">JOIN</span> <span class=\"n\">dogs</span> <span class=\"k\">ON</span> <span class=\"n\">dogs</span><span class=\"p\">.</span><span class=\"n\">owner_id</span> <span class=\"o\">=</span> <span class=\"n\">owners</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. This will actually return all of the owners and their matching dogs.\nWhich query will give us every dog?</p>",
          "weight": 0.0
        },
        {
          "id": 9748,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight sql\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"n\">dogs</span>\n<span class=\"k\">INNER</span> <span class=\"k\">JOIN</span> <span class=\"n\">owners</span> <span class=\"k\">ON</span> <span class=\"n\">dogs</span><span class=\"p\">.</span><span class=\"n\">owner_id</span> <span class=\"o\">=</span> <span class=\"n\">owners</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">;</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>Not quite. This will actually only return dogs that have an owner. Which query\nwill give us every dog?</p>",
          "weight": 0.0
        },
        {
          "id": 4581,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "id": 366045,
      "quiz_id": 53499,
      "quiz_group_id": null,
      "assessment_question_id": 632191,
      "position": null,
      "question_name": "SQL: Joins",
      "question_type": "true_false_question",
      "question_text": "<p>A join table creates a many-to-many relationship between two other tables.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "Source/s:Creating Join Tables",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"/courses/7559/pages/creating-join-tables\">Creating Join Tables</a></li></ul><p></p>",
      "answers": [
        {
          "comments": "",
          "comments_html": "<p>Correct! To set up a many-to-many relationship, we use a join table that has\ncommon fields from two or more other tables.</p>",
          "text": "True",
          "weight": 100,
          "id": 7886
        },
        {
          "comments": "",
          "comments_html": "<p>A join table <strong>is</strong> used to set up a many-to-many relationship. You may want to\nreview the source/s for this question.</p>",
          "text": "False",
          "weight": 0,
          "id": 3848
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}